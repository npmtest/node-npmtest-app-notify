{"/home/travis/build/npmtest/node-npmtest-app-notify/test.js":"/* istanbul instrument in package npmtest_app_notify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-app-notify/lib.npmtest_app_notify.js":"/* istanbul instrument in package npmtest_app_notify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_app_notify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_app_notify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-app-notify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-app-notify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_app_notify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_app_notify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_app_notify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_app_notify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_app_notify.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_app_notify.__dirname +\n                    '/lib.npmtest_app_notify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-app-notify/node_modules/app-notify/index.js":"var Sms = require('./lib/sms');\nvar Email = require('./lib/email');\nvar _ = require('lodash');\nvar async = require('async');\nvar q = require('q');\n\nfunction Notify(cfg){\n  if (!(this instanceof Notify)) {\n    return new Notify(cfg);\n  }\n\n  this.cfg = cfg || {};\n  this.email = new Email(this.cfg);\n  this.sms = new Sms(this.cfg);\n}\n\nvar notify = {\n  respondWithError: function(err, method){\n    if ( typeof method === 'function' ) {\n      return method(err);\n    }\n\n    return method.reject(err);\n  },\n\n  respondWithSuccess: function(data, method){\n    if ( typeof method === 'function' ){\n      return method(null, data);\n    }\n\n    return method.resolve(data);\n  },\n\n  send: function send(opts, callback){\n    opts = _.extend(this.cfg, opts);\n\n    var method = !callback ? q.defer() : callback;\n\n    async.parallel([\n      //sms\n      function(cb){\n        if ( !this.cfg.sms || !this.cfg.sms.enabled ) {\n          return cb();\n        }\n\n        this.sms.send(opts)\n          .then(function(data){\n            cb(null, data);\n          })\n          .catch(function(err){\n            cb(err);\n          });\n      }.bind(this),\n      //email\n      function(cb){\n        if ( !this.cfg.email || !this.cfg.email.enabled ) {\n          return cb();\n        }\n\n        this.email.send(opts)\n          .then(function(data){\n            cb(null, data);\n          })\n          .catch(function(err){\n            cb(err);\n          });\n      }.bind(this)\n    ], function(err, data){\n      if ( err ) {\n        return this.respondWithError(err, method);\n      }\n\n      //remove undefined items in data array from response\n      data = data.filter(function(d){\n        return typeof d !== 'undefined';\n      });\n\n      return this.respondWithSuccess(data, method);\n    }.bind(this));\n\n    if ( method.promise ) {\n      return method.promise;\n    }\n  }\n};\n\n//merge our prototype in with the default\nNotify.prototype = _.merge(Notify.prototype, notify);\n\nmodule.exports = Notify;\n","/home/travis/build/npmtest/node-npmtest-app-notify/node_modules/app-notify/lib/sms.js":"var q = require('q');\nvar _ = require('lodash');\n\nfunction Sms(cfg){\n  if (!(this instanceof Sms)) {\n    return new Sms(cfg);\n  }\n\n  this.cfg = cfg || {};\n}\n\nvar sms = {\n  respondWithError: function respondWithError(err, method){\n    if ( typeof method === 'function' ) {\n      return method(err);\n    }\n\n    return method.reject(err);\n  },\n\n  respondWithSuccess: function respondWithSuccess(data, method){\n    if ( typeof method === 'function' ){\n      return method(null, data);\n    }\n\n    return method.resolve(data);\n  },\n\n  send: function send(opts, cb){\n    var cfg = this.cfg;\n    var method = !cb ? q.defer() : cb;\n\n    opts = _.merge(this.cfg, opts);\n\n    //check for a message\n    if ( !opts.message || !opts.message.length ) {\n      return this.respondWithError({ error: 'Please provide a message', code: 'MISSING_MESSAGE' }, method);\n    }\n\n    var sid = opts.sms.sid;\n    var auth = opts.sms.auth;\n\n    //check for required auth\n    if ( !sid || !auth ) {\n      return this.respondWithError({ error: 'Please provide sms.sid and sms.auth.', code: 'MISSING_AUTH' }, method);\n    }\n\n    //check for sms headers\n    if ( !opts.sms.from || !opts.sms.to ) {\n      return this.respondWithError({ error: 'Please provide sms.from and sms.to', code: 'MISSING_HEADERS' }, method);\n    }\n\n    var client = require('twilio')(sid, auth);\n\n    client.sendMessage({\n      to: opts.sms.to, // Any number Twilio can deliver to\n      from: opts.sms.from, // A number you bought from Twilio and can use for outbound communication\n      body: opts.message // body of the SMS message\n\n    }, function(err, data) { //this function is executed when a response is received from Twilio\n\n      if ( err ) {\n        return this.respondWithError(err, method);\n      }\n\n      // \"responseData\" is a JavaScript object containing data received from Twilio.\n      // A sample response from sending an SMS message is here (click \"JSON\" to see how the data appears in JavaScript):\n      // http://www.twilio.com/docs/api/rest/sending-sms#example-1\n\n      //console.log(data.body); // outputs \"word to your mother.\"\n      return this.respondWithSuccess(data, method);\n    }.bind(this));\n\n    //return promise if no callback\n    if ( method.promise ) {\n      return method.promise;\n    }\n  }\n};\n\n\n//merge our prototype in with the default\nSms.prototype = _.merge(Sms.prototype, sms);\n\nmodule.exports = Sms;\n","/home/travis/build/npmtest/node-npmtest-app-notify/node_modules/app-notify/lib/email.js":"var nodemailer = require('nodemailer');\nvar q = require('q');\nvar _ = require('lodash');\n\nfunction Email(cfg){\n  if (!(this instanceof Email)) {\n    return new Email(cfg);\n  }\n\n  this.cfg = cfg || {};\n}\n\nvar email = {\n  respondWithError: function(err, method){\n    if ( typeof method === 'function' ) {\n      return method(err);\n    }\n\n    return method.reject(err);\n  },\n\n  respondWithSuccess: function (data, method){\n    if ( typeof method === 'function' ){\n      return method(null, data);\n    }\n\n    return method.resolve(data);\n  },\n\n  send: function (opts, cb){\n    var cfg = this.cfg;\n    var method = !cb ? q.defer() : cb;\n\n    opts = _.merge(this.cfg, opts);\n\n    //use defaults from config.json if none specified\n    opts.subject = opts.subject || opts.email.subject;\n\n    //check for a message\n    if ( !opts.message || !opts.message.length ) {\n      return this.respondWithError({ error: 'Please provide a message', code: 'MISSING_MESSAGE' }, method);\n    }\n\n    if ( !opts.smtp ) {\n      return this.respondWithError({ error: 'Please provide a smtp settings', code: 'MISSING_SMTP' }, method);\n    }\n\n    var user = opts.smtp.user;\n    var pass = opts.smtp.pass;\n    var host = opts.smtp.host;\n    var port = opts.smtp.port;\n\n    if ( !user || !pass || !host || !port ) {\n      return this.respondWithError({ error: 'Please provide smtp.user, smtp.pass, smtp.host and smtp.port', code: 'MISSING_SMTP' }, method);\n    }\n\n    //check for email headers\n    if ( !opts.email.to || !opts.subject ) {\n      return this.respondWithError({ error: 'Please provide email to and subject', code: 'MISSING_HEADERS' }, method);\n    }\n\n    //from should not be overriden as it is required in email config settings by the provider\n    if ( !opts.email.from ) {\n      return this.respondWithError({ error: 'Please provide email.from', code: 'MISSING_HEADERS' }, method);\n    }\n\n    var transporter = nodemailer.createTransport({\n      host: host,\n      port: port,\n  //\t\tservice: 'Gmail', //see https://github.com/andris9/nodemailer-wellknown#supported-services\n      auth: {\n        user: user,\n        pass: pass\n      }\n    });\n\n    var mailOptions = {\n      from: opts.email.from,\n      to: opts.email.to,\n      subject: opts.subject,\n      text: opts.message\n    };\n\n    transporter.sendMail(mailOptions, function(err, data){\n      if ( err ) {\n        return this.respondWithError(err, method);\n      }\n\n      return this.respondWithSuccess(data, method);\n    }.bind(this));\n\n    if ( method.promise ) {\n      return method.promise;\n    }\n  }\n};\n\n//merge our prototype in with the default\nEmail.prototype = _.merge(Email.prototype, email);\n\nmodule.exports = Email;\n","/home/travis/build/npmtest/node-npmtest-app-notify/node_modules/app-notify/gulpfile.js":"var gulp = require('gulp');\nvar mocha = require('gulp-mocha');\n\ngulp.task('default', ['test']);\n\ngulp.task('test', function () {\n  return gulp.src('./test/unit/**/*.js', {read: false})\n    .pipe(mocha({reporter: 'nyan'}));\n});\n\ngulp.task('test-integration', function(){\n  return gulp.src('./test/integration/**/*.js', { read: false })\n    .pipe(mocha({reporter: 'nyan' }));\n});\n"}